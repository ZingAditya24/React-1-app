{"version":3,"sources":["SeasonsDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonsDisplay","props","lat","month","season","Date","getMonth","className","Spinner","class","App","state","errMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"+LAIMA,G,MAAe,CAEjBC,OAAS,CAACC,KAAO,yBAA0BC,SAAU,OACrDC,OAAS,CAACF,KAAM,uBAAwBC,SAAU,eA2BvCE,EAbQ,SAACC,GACpB,IAXeC,EAAKC,EAWdC,GAXSF,EAWUD,EAAMC,KAXXC,GAWgB,IAAIE,MAAOC,YATpC,GAAKH,EAAQ,EACZD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAKJ,EAEJP,EAAaS,GAA/BP,EAFsB,EAEtBA,KAAMC,EAFgB,EAEhBA,SAEb,OACI,yBAAKS,UAAS,0BAAqBH,EAArB,MACV,uBAAGG,UAAS,6BAAwBT,EAAxB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,8BAAyBT,EAAzB,aCfTU,EAZC,WAEZ,OAEI,yBAAKC,MAAM,oBACP,yBAAKA,MAAM,kBAAX,aCgBNC,E,4MAmBFC,MAAQ,CAAET,IAAK,KAAMU,WAAY,I,kEAEb,IAAD,OACfC,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GACI,EAAKC,SAAS,CAAEhB,IAAKe,EAASE,OAAOC,cAEzC,SAAAC,GACI,EAAKH,SAAS,CAAEN,WAAaS,EAAIC,e,+BAQzC,OAAIC,KAAKZ,MAAMT,MAAQqB,KAAKZ,MAAMC,WAE1B,kBAAC,EAAD,CAAgBV,IAAQqB,KAAKZ,MAAMT,OAMtCqB,KAAKZ,MAAMT,KAAOqB,KAAKZ,MAAMC,WAE1B,uCACYW,KAAKZ,MAAMC,YAM3B,kBAAC,EAAD,U,GApDMY,IAAMC,WA0DxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.58592acb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SeasonsDisplay.css'\r\n\r\n\r\nconst seasonConfig = {\r\n\r\n    summer : {text : \"Let's hit the beach...\", iconName: \"sun\"},\r\n    winter : {text: \"Burr, it's chilly...\", iconName: \"snowflake\"}\r\n\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n\r\n    if(month > 2 && month < 9){\r\n        return (lat > 0 ? \"summer\" : \"winter\");\r\n    }else{\r\n        return (lat > 0 ? \"winter\" : \"summer\");\r\n    }\r\n\r\n};\r\n\r\nconst SeasonsDisplay = (props) =>{\r\n    const season = getSeason(props.lat, new Date().getMonth());\r\n    const {text, iconName} = seasonConfig[season];\r\n\r\n    return (\r\n        <div className={` season-display ${season} `}>\r\n            <i className={` icon-left massive ${iconName} icon`} />\r\n            <h1>{text}</h1>\r\n            <i className={` icon-right massive ${iconName} icon`} />\r\n        </div> \r\n    );\r\n};\r\n\r\nexport default SeasonsDisplay;","import React from 'react';\r\n\r\nconst Spinner = () => {\r\n\r\n    return (\r\n        \r\n        <div class=\"ui active dimmer\">\r\n            <div class=\"ui text loader\">Loading</div>\r\n        </div>\r\n       \r\n    );\r\n\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonsDisplay from './SeasonsDisplay';\r\nimport Spinner from './Spinner';\r\n\r\n//Functional Component\r\n/*\r\nconst App = () => {\r\n\r\n    window.navigator.geolocation.getCurrentPosition(\r\n        position => console.log(position),\r\n        err => console.log(err)\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            Hi There !!!\r\n        </div>\r\n    );\r\n};*/ \r\n\r\n//Class Component\r\n\r\nclass App extends React.Component{\r\n\r\n    /*\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = { lat: null, errMessage : \"\" };\r\n\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            position => {\r\n                this.setState({ lat: position.coords.latitude});\r\n            },\r\n            err => {\r\n                this.setState({ errMessage : err.message })\r\n            }\r\n        );\r\n\r\n    }*/\r\n\r\n    state = { lat: null, errMessage: \"\"};\r\n\r\n    componentDidMount(){\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            position => {\r\n                this.setState({ lat: position.coords.latitude});\r\n            },\r\n            err => {\r\n                this.setState({ errMessage : err.message })\r\n            }\r\n        );\r\n    }\r\n\r\n    render(){\r\n        \r\n    \r\n        if (this.state.lat && !this.state.errMessage){\r\n            return (\r\n                <SeasonsDisplay lat = { this.state.lat }>\r\n\r\n                </SeasonsDisplay>\r\n            );\r\n        }\r\n\r\n        if (!this.state.lat && this.state.errMessage){\r\n            return (\r\n                <div>\r\n                    Error: {this.state.errMessage}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Spinner/>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));"],"sourceRoot":""}